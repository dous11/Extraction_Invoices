# Importation des biblioth√®ques n√©cessaires
import os
os.environ["KMP_DUPLICATE_LIB_OK"] = "TRUE"  # √âvite les conflits de biblioth√®ques (probl√®mes li√©s √† Keras/TensorFlow)
import numpy as np  # Pour la manipulation de tableaux et calculs num√©riques
import streamlit as st  # Framework pour cr√©er une interface web interactive
import re  # Pour utiliser des expressions r√©guli√®res (recherche de motifs dans le texte)
import tempfile  # Pour g√©rer des fichiers temporaires
import math  # Pour des calculs math√©matiques (ex. comparaison de valeurs)
import json  # Pour sauvegarder/exportation des donn√©es au format JSON
import pandas as pd  # Pour manipuler et afficher des donn√©es sous forme de tableaux
from pathlib import Path  # Pour manipuler les chemins de fichiers
import cv2  # OpenCV pour le traitement d'images (pr√©traitement, conversion)
import easyocr  # Biblioth√®que OCR pour extraire du texte √† partir d'images
import io  # Pour manipuler des flux d'entr√©e/sortie (ex. sauvegarde d'images)
from pdf2image import convert_from_bytes  # Pour convertir des fichiers PDF en images
import base64  # Pour encoder des fichiers (images, textes) en base64 pour t√©l√©chargement
from PIL import Image  # Pour manipuler des images (conversion, sauvegarde)

# Configuration de la page Streamlit
st.set_page_config(
    page_title="Invoice Data Extraction",  # Titre de la page web
    page_icon="üìä",  # Ic√¥ne affich√©e dans l'onglet du navigateur
    layout="wide",  # Mise en page large pour une meilleure utilisation de l'espace
    initial_sidebar_state="collapsed"  # Barre lat√©rale repli√©e par d√©faut
)

# CSS personnalis√© pour styliser l'interface utilisateur
st.markdown("""
<style>
    .main {
        padding: 2rem 3rem;  /* Ajoute du padding √† la zone principale */
    }
    .stButton>button {
        background-color: #4CAF50;  /* Couleur de fond verte pour les boutons */
        color: white;  /* Texte blanc */
        font-weight: bold;  /* Texte en gras */
        padding: 0.5rem 1rem;  /* Padding interne */
        border-radius: 5px;  /* Coins arrondis */
        transition: all 0.3s;  /* Animation fluide lors des interactions */
    }
    .stButton>button:hover {
        background-color: #45a049;  /* Couleur plus fonc√©e au survol */
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);  /* Ombre au survol */
    }
    .upload-section {
        border: 2px dashed #ccc;  /* Bordure en pointill√©s pour la zone de t√©l√©chargement */
        border-radius: 10px;  /* Coins arrondis */
        padding: 2rem;  /* Padding interne */
        text-align: center;  /* Texte centr√© */
        margin-bottom: 2rem;  /* Marge en bas */
    }
    .results-section {
        background-color: #f8f9fa;  /* Fond gris clair pour les r√©sultats */
        border-radius: 10px;  /* Coins arrondis */
        padding: 1.5rem;  /* Padding interne */
        margin-top: 2rem;  /* Marge en haut */
    }
    .download-btn {
        background-color: #007bff !important;  /* Couleur bleue pour les boutons de t√©l√©chargement */
    }
    h1 {
        color: #2C3E50;  /* Couleur bleu fonc√© pour les titres */
    }
    .success-msg {
        color: #4CAF50;  /* Couleur verte pour les messages de succ√®s */
        font-weight: bold;  /* Texte en gras */
    }
    .error-msg {
        color: #f44336;  /* Couleur rouge pour les messages d'erreur */
        font-weight: bold;  /* Texte en gras */
    }
</style>
""", unsafe_allow_html=True)

# Initialisation du lecteur EasyOCR (mis en cache pour √©viter de le recharger √† chaque ex√©cution)
@st.cache_resource
def load_ocr_reader():
    return easyocr.Reader(['en', 'fr'], gpu=False)  # Charge le lecteur OCR pour l'anglais et le fran√ßais, sans GPU

# Variables globales de session pour stocker les r√©sultats et √©tats
if 'extraction_results' not in st.session_state:
    st.session_state.extraction_results = None  # R√©sultats de l'extraction (donn√©es de la facture)
if 'image_preview' not in st.session_state:
    st.session_state.image_preview = None  # Image originale pour pr√©visualisation
if 'ocr_text' not in st.session_state:
    st.session_state.ocr_text = None  # Texte brut extrait par OCR

# Titre et description de l'application affich√©s dans l'interface
st.title("üìÑ Extraction de donn√©es de factures")
st.markdown("""
Cette application vous permet d'extraire automatiquement les informations cl√©s de vos factures.
T√©l√©chargez simplement une image (JPG, PNG) ou un PDF de facture et laissez l'application analyser le contenu.
""")

# Section pour t√©l√©verser un fichier
st.markdown("<div class='upload-section'>", unsafe_allow_html=True)
uploaded_file = st.file_uploader("Choisissez une image ou un PDF de facture", 
                                type=['jpg', 'jpeg', 'png', 'pdf'],
                                help="Formats accept√©s: JPG, PNG, PDF")  # Zone de t√©l√©versement pour fichiers image ou PDF
st.markdown("</div>", unsafe_allow_html=True)

### SECTION FONCTIONS DE TRAITEMENT ###

def preprocess_image(image):
    """Pr√©traite l'image pour am√©liorer les r√©sultats de l'OCR"""
    # Conversion en niveaux de gris si l'image est en couleur
    if len(image.shape) == 3:  # V√©rifie si l'image est en couleur (3 canaux RGB)
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)  # Convertit en niveaux de gris
    else:
        gray = image  # Si d√©j√† en gris, pas de conversion
    
    # Seuillage adaptatif pour augmenter le contraste
    bin_img = cv2.adaptiveThreshold(
        gray, 255,  # Image source et valeur maximale
        cv2.ADAPTIVE_THRESH_GAUSSIAN_C,  # M√©thode adaptative bas√©e sur une gaussienne
        cv2.THRESH_BINARY,  # Binarisation (noir ou blanc)
        blockSize=35,  # Taille de la zone pour le calcul du seuil
        C=10  # Constante soustraite au seuil
    )
    
    # Op√©ration morphologique pour r√©duire le bruit
    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (2, 2))  # Noyau rectangulaire 2x2
    cleaned = cv2.morphologyEx(bin_img, cv2.MORPH_OPEN, kernel, iterations=1)  # Ouvre l'image pour √©liminer les petits artefacts
    
    return cleaned  # Retourne l'image pr√©trait√©e

def ocr_image(image, reader):
    """
    Ex√©cute l'OCR sur une image pr√©trait√©e
    Retourne le texte extrait et l'image pr√©trait√©e
    """
    preprocessed = preprocess_image(image)  # Pr√©traitement de l'image
    
    # Ex√©cute l'OCR avec EasyOCR
    result = reader.readtext(preprocessed, detail=0)  # Extrait le texte sans d√©tails (seulement les cha√Ænes)
    text = "\n".join(result)  # Concat√®ne les r√©sultats avec des sauts de ligne
    
    return text, preprocessed  # Retourne le texte OCR et l'image pr√©trait√©e

def extract_invoice_data(text):
    """
    Extrait les donn√©es cl√©s de la facture √† partir du texte OCR
    Utilise des expressions r√©guli√®res pour identifier :
    - Num√©ro de facture
    - Date
    - Client
    - Montants financiers
    """
    # D√©finir les motifs regex pour chaque champ
    patterns = {
        "invoice_no": r"Invoice no:?\s*(\d+)",  # Num√©ro de facture (ex. "Invoice no: 123")
        "date": r"Date of issue:?\s*(\d{2}/\d{2}/\d{4})",  # Date (ex. "Date of issue: 12/05/2023")
        "client": r"Client:.*?\n.*?\n(.*?)(?:\n|$)",  # Nom du client (sur une ligne apr√®s "Client:")
    }
    
    invoice_data = {}  # Dictionnaire pour stocker les donn√©es extraites
    
    # Recherche des motifs dans le texte
    for key, pattern in patterns.items():
        match = re.search(pattern, text, re.DOTALL)  # Recherche avec regex, DOTALL pour inclure les sauts de ligne
        if match:
            invoice_data[key] = match.group(1).strip()  # Stocke la valeur trouv√©e (groupe 1)
        else:
            invoice_data[key] = None  # Si non trouv√©, stocke None
    
    # Extraction des montants financiers (net, TVA, total)
    net, vat, gross = extract_financial_values(text)
    invoice_data.update({
        "net_worth": net,  # Montant net
        "vat": vat,  # Montant de la TVA
        "gross_worth": gross  # Montant total
    })
    
    return invoice_data  # Retourne le dictionnaire des donn√©es extraites
def extract_financial_values(content):
    """
    Fonction robuste pour extraire les valeurs financi√®res d'une facture.
    Impl√©mente plusieurs strat√©gies de backup et validation des donn√©es.
    """
    # Pattern pour les nombres avec gestion des s√©parateurs de milliers
    number_pattern = r"[\d\s]+(?:,\d{2})?"
    currency_pattern = r"(?:[\$\‚Ç¨\¬£]?\s*)?"  # Support des symboles mon√©taires optionnels
    
    # Tentative avec un pattern strict (3 valeurs sur une ligne)
    strict_pattern = fr"Total.*?{currency_pattern}({number_pattern})\s+{currency_pattern}({number_pattern})\s+{currency_pattern}({number_pattern})"
    match = re.search(strict_pattern, content, re.DOTALL)
    
    if match:
        net, vat, gross = match.groups()
    else:
        # Pattern flexible pour valeurs sur plusieurs lignes
        flexible_pattern = fr"Total\s*[\n\r]+{currency_pattern}({number_pattern})\s*[\n\r]+{currency_pattern}({number_pattern})\s*[\n\r]+{currency_pattern}({number_pattern})"
        match = re.search(flexible_pattern, content, re.DOTALL)
        if match:
            net, vat, gross = match.groups()
        else:
            # Dernier recours: chercher les 3 derniers nombres avant "Top" ou autre marqueur
            last_numbers = re.findall(fr"{currency_pattern}({number_pattern})(?=\s|$)", content)
            if len(last_numbers) >= 3:
                net, vat, gross = last_numbers[-3:]
            else:
                return None, None, None
    
    # Nettoyage et conversion des valeurs
    net = clean_value(net) if 'net' in locals() else None
    vat = clean_value(vat) if 'vat' in locals() else None
    gross = clean_value(gross) if 'gross' in locals() else None
    
    # Calculs de backup si certaines valeurs sont manquantes
    if net is None and vat is not None and gross is not None:
        try:
            net = gross - vat
        except:
            pass
    
    if vat is None and net is not None and gross is not None:
        try:
            vat = gross - net
        except:
            pass
    
    if gross is None and net is not None and vat is not None:
        try:
            gross = net + vat
        except:
            pass
    
    # Validation des r√©sultats
    if None not in [net, vat, gross]:
        if not math.isclose(net + vat, gross, rel_tol=0.01):
            # Correction des inversions potentielles entre VAT et Gross
            if math.isclose(net + gross, vat, rel_tol=0.01):
                vat, gross = gross, vat
    
    return net, vat, gross
def clean_value(val):
    """
    Fonction utilitaire pour nettoyer et convertir une valeur num√©rique en float.
    Corrige les erreurs courantes d'OCR et normalise le format des nombres.
    """
    if val is None:
        return None

    # Dictionnaire des corrections pour les erreurs d'OCR typiques
    corrections = {
        'B': '8',  # Remplace 'B' par '8'
        'l': '1',  # Remplace 'l' par '1'
        'I': '1',  # Remplace 'I' par '1'
        'O': '0',  # Remplace 'O' par '0'
        ' ': ''   # Supprime les espaces
    }

    try:
        # Applique les corrections caract√®re par caract√®re
        cleaned = ''.join([corrections.get(c, c) for c in val])
        # Normalise les s√©parateurs : remplace ',' par '.' et supprime les espaces
        cleaned = cleaned.replace(' ', '').replace(',', '.')
        return float(cleaned)  # Convertit en float
    except (ValueError, AttributeError):
        return None  # Retourne None si la conversion √©choue

def validate_results(invoice_data):
    """Valide les r√©sultats extraits et calcule les valeurs manquantes si possible"""
    net = invoice_data.get("net_worth")  # Montant net
    vat = invoice_data.get("vat")  # TVA
    gross = invoice_data.get("gross_worth")  # Total
    
    # Calcule les valeurs manquantes si possible
    if net is None and vat is not None and gross is not None:
        try:
            net = gross - vat  # Calcule le net
            invoice_data["net_worth"] = net
        except:
            pass
    
    if vat is None and net is not None and gross is not None:
        try:
            vat = gross - net  # Calcule la TVA
            invoice_data["vat"] = vat
        except:
            pass
    
    if gross is None and net is not None and vat is not None:
        try:
            gross = net + vat  # Calcule le total
            invoice_data["gross_worth"] = gross
        except:
            pass
    
    # V√©rifie la coh√©rence des valeurs
    if None not in [net, vat, gross]:
        if not math.isclose(net + vat, gross, rel_tol=0.01):  # V√©rifie si net + TVA ‚âà total
            # Corrige les erreurs √©videntes (ex. inversion TVA/total)
            if math.isclose(net + gross, vat, rel_tol=0.01):  # Si net + total ‚âà TVA
                invoice_data["vat"] = gross  # Inverse les valeurs
                invoice_data["gross_worth"] = vat
    
    return invoice_data  # Retourne les donn√©es valid√©es

def convert_pdf_to_image(pdf_file):
    """Convertit la premi√®re page d'un PDF en image"""
    pdf_bytes = pdf_file.read()  # Lit le fichier PDF en bytes
    images = convert_from_bytes(pdf_bytes, dpi=200)  # Convertit en images avec une r√©solution de 200 DPI
    if images:
        # Convertit l'image PIL en format OpenCV (BGR)
        open_cv_image = cv2.cvtColor(np.array(images[0]), cv2.COLOR_RGB2BGR)
        return open_cv_image
    return None  # Retourne None si la conversion √©choue

def get_image_download_link(img, filename, text):
    """G√©n√®re un lien de t√©l√©chargement pour une image"""
    buffered = io.BytesIO()  # Cr√©e un buffer pour stocker l'image
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # Convertit l'image en RGB pour PIL
    Image.fromarray(img).save(buffered, format="PNG")  # Sauvegarde l'image dans le buffer
    img_str = base64.b64encode(buffered.getvalue()).decode()  # Encode en base64
    href = f'<a href="data:file/png;base64,{img_str}" download="{filename}">{text}</a>'  # Cr√©e le lien HTML
    return href

def get_file_download_link(data, filename, text):
    """G√©n√®re un lien de t√©l√©chargement pour un fichier texte"""
    b64 = base64.b64encode(data.encode()).decode()  # Encode les donn√©es en base64
    href = f'<a href="data:file/txt;base64,{b64}" download="{filename}">{text}</a>'  # Cr√©e le lien HTML
    return href

# Bouton pour lancer l'analyse
if uploaded_file is not None:
    col1, col2 = st.columns([1, 1])  # Cr√©e deux colonnes pour organiser l'interface
    
    with col1:
        if st.button("üîç Analyser le document", key="analyze_btn"):  # Bouton pour lancer l'analyse
            with st.spinner('Traitement en cours...'):  # Affiche un indicateur de chargement
                try:
                    # Charge le lecteur OCR
                    reader = load_ocr_reader()
                    
                    # Traite selon le type de fichier
                    file_extension = Path(uploaded_file.name).suffix.lower()  # R√©cup√®re l'extension du fichier
                    
                    if file_extension == '.pdf':
                        # Convertit le PDF en image
                        image = convert_pdf_to_image(uploaded_file)
                        if image is None:
                            st.error("Impossible de convertir le PDF en image.")  # Affiche une erreur si √©chec
                            st.stop()  # Arr√™te l'ex√©cution
                    else:
                        # Lit l'image directement
                        file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
                        image = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)  # D√©code l'image en format OpenCV
                    
                    # Sauvegarde l'image pour pr√©visualisation
                    preview_img = image.copy()
                    st.session_state.image_preview = preview_img
                    
                    # Ex√©cute l'OCR
                    ocr_text, preprocessed_img = ocr_image(image, reader)
                    st.session_state.ocr_text = ocr_text  # Stocke le texte OCR
                    
                    # Extrait les donn√©es de la facture
                    invoice_data = extract_invoice_data(ocr_text)
                    
                    # Valide et corrige les donn√©es
                    invoice_data = validate_results(invoice_data)
                    
                    # Stocke les r√©sultats
                    st.session_state.extraction_results = invoice_data
                    
                    # Affiche un message de succ√®s
                    st.success("Extraction termin√©e avec succ√®s!")
                
                except Exception as e:
                    st.error(f"Une erreur s'est produite lors de l'analyse: {str(e)}")  # Affiche l'erreur si √©chec

    # Affiche les options suppl√©mentaires
    if uploaded_file is not None:
        with col2:
            st.markdown("### Options suppl√©mentaires")
            show_ocr = st.checkbox("Afficher le texte OCR brut", value=False)  # Case pour afficher le texte OCR
            show_debug = st.checkbox("Mode debug", value=False)  # Case pour activer le mode debug

# Affiche les r√©sultats si disponibles
if st.session_state.extraction_results:
    st.markdown("<div class='results-section'>", unsafe_allow_html=True)
    st.subheader("üìã R√©sultats de l'extraction")
    
    # Formatte les r√©sultats pour l'affichage
    results = st.session_state.extraction_results
    formatted_results = {
        "Num√©ro de Facture": results.get("invoice_no", "Non d√©tect√©"),  # Num√©ro de facture ou message par d√©faut
        "Date": results.get("date", "Non d√©tect√©e"),  # Date ou message par d√©faut
        "Client": results.get("client", "Non d√©tect√©"),  # Client ou message par d√©faut
        "Montant Net": f"{results.get('net_worth', 'Non d√©tect√©')} $" if results.get('net_worth') is not None else "Non d√©tect√©",
        "TVA": f"{results.get('vat', 'Non d√©tect√©e')} $" if results.get('vat') is not None else "Non d√©tect√©e",
        "Total": f"{results.get('gross_worth', 'Non d√©tect√©')} $" if results.get('gross_worth') is not None else "Non d√©tect√©"
    }
    
    # Affiche les r√©sultats sous forme de tableau
    df = pd.DataFrame([formatted_results])
    st.dataframe(df.T.rename(columns={0: "Valeur"}), use_container_width=True)  # Affiche le tableau transpos√©
    
    # V√©rifie la coh√©rence des valeurs financi√®res
    net = results.get("net_worth")
    vat = results.get("vat")
    gross = results.get("gross_worth")
    
    if None not in [net, vat, gross]:
        if math.isclose(net + vat, gross, rel_tol=0.01):  # V√©rifie si net + TVA ‚âà total
            st.markdown("<p class='success-msg'>‚úÖ Les valeurs financi√®res sont coh√©rentes</p>", unsafe_allow_html=True)
        else:
            st.markdown("<p class='error-msg'>‚ö†Ô∏è Les valeurs financi√®res ne sont pas coh√©rentes</p>", unsafe_allow_html=True)
    else:
        missing = []  # Liste des valeurs manquantes
        if net is None:
            missing.append("Montant Net")
        if vat is None:
            missing.append("TVA")
        if gross is None:
            missing.append("Total")
        
        st.markdown(f"<p class='error-msg'>‚ö†Ô∏è Valeurs manquantes: {', '.join(missing)}</p>", unsafe_allow_html=True)
    
    # Options de t√©l√©chargement
    st.subheader("üì• T√©l√©charger les r√©sultats")
    col1, col2 = st.columns(2)
    
    with col1:
        # T√©l√©chargement au format JSON
        json_data = json.dumps(results, indent=4, ensure_ascii=False)  # Convertit les r√©sultats en JSON
        st.download_button(
            label="T√©l√©charger en JSON",
            data=json_data,
            file_name="invoice_data.json",
            mime="application/json",
            key="json_download",
            help="T√©l√©charger les r√©sultats au format JSON"
        )
    
    with col2:
        # T√©l√©chargement au format CSV
        csv_df = pd.DataFrame([results])
        csv = csv_df.to_csv(index=False)  # Convertit les r√©sultats en CSV
        st.download_button(
            label="T√©l√©charger en CSV",
            data=csv,
            file_name="invoice_data.csv",
            mime="text/csv",
            key="csv_download",
            help="T√©l√©charger les r√©sultats au format CSV"
        )
    
    st.markdown("</div>", unsafe_allow_html=True)
    
    # Affiche les informations de d√©bogage si activ√©
    if show_debug and 'show_debug' in locals():
        st.subheader("üîß Informations de d√©bogage")
        
        # Affiche l'image originale
        if st.session_state.image_preview is not None:
            st.image(cv2.cvtColor(st.session_state.image_preview, cv2.COLOR_BGR2RGB), 
                     caption="Image originale", use_column_width=True)
        
        # Affiche le texte OCR brut si demand√©
        if st.session_state.ocr_text is not None and show_ocr:
            st.subheader("Texte OCR brut")
            st.text_area("Texte OCR brut", st.session_state.ocr_text, height=300, key="ocr_text_area")

# Affiche le texte OCR brut si la case est coch√©e
if 'show_ocr' in locals() and show_ocr and st.session_state.ocr_text:
    st.subheader("üìù Texte OCR extrait")
    st.text_area("Texte OCR brut", st.session_state.ocr_text, height=300, key="ocr_text_area-1")

# Pied de page
st.markdown("---")
st.markdown("""
<div style="text-align: center">
    <p>¬© 2025 - Extraaction M1-ASD 24/25 </p>
</div>
""", unsafe_allow_html=True)

# Importations suppl√©mentaires (redondantes, d√©j√† incluses plus haut)
import numpy as np
from PIL import Image
